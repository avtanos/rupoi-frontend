const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—É–∫–∞ useResponsive
const filesToUpdate = [
  'src/app/warehouse/page.tsx',
  'src/app/overheads/page.tsx',
  'src/app/employees/page.tsx',
  'src/app/archive/list/page.tsx',
  'src/app/settings/page.tsx',
  'src/components/Dashboard.tsx',
  'src/components/SemiFinishedProductsBlock.tsx',
  'src/components/UIFieldBindingManager.tsx',
  'src/components/PrintTemplatesManager.tsx',
  'src/components/WorkshopManager.tsx',
  'src/components/RolesManager.tsx',
  'src/components/MedicalApprovalManager.tsx',
  'src/components/ValidationRulesManager.tsx'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—É–∫–∞ useResponsive
function addResponsiveHook(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ö—É–∫ useResponsive
    if (content.includes('useResponsive()')) {
      console.log(`‚è≠Ô∏è  Skipping ${filePath} - already has useResponsive hook`);
      return;
    }
    
    // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö—É–∫–∞ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ useState)
    const useStateRegex = /const \[[^]]+\] = useState\([^)]+\);/g;
    const matches = [...content.matchAll(useStateRegex)];
    
    if (matches.length > 0) {
      const lastMatch = matches[matches.length - 1];
      const insertIndex = lastMatch.index + lastMatch[0].length;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ useResponsive
      const hookToAdd = '\n  const { isMobile } = useResponsive();';
      content = content.slice(0, insertIndex) + hookToAdd + content.slice(insertIndex);
      
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ Added useResponsive hook to ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è  No useState found in ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå Error updating ${filePath}:`, error.message);
  }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
console.log('üöÄ Adding useResponsive hooks...');
filesToUpdate.forEach(addResponsiveHook);
console.log('‚ú® All hooks added!');
